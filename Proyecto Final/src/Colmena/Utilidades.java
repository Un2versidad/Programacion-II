package Colmena;

import java.io.*;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.concurrent.locks.*;

public class Utilidades {
    // Usamos un lock para evitar condiciones de carrera en las operaciones de entrada/salida
    private static final Lock inputLock = new ReentrantLock();

    // M√©todo para imprimir texto con un retraso, simulando una escritura progresiva
    public static void printWithDelay(String text, int delayMs) {
        inputLock.lock(); // Bloqueamos para garantizar que no haya acceso concurrente
        try {
            // Iteramos sobre cada car√°cter en el texto y lo imprimimos con un retraso
            for (char c : text.toCharArray()) {
                System.out.print(c); // Imprimimos el car√°cter
                try {
                    Thread.sleep(delayMs); // Retraso entre caracteres
                } catch (InterruptedException ignored) {
                    // Si ocurre una interrupci√≥n, simplemente la ignoramos
                }
            }
            System.out.println(); // Nueva l√≠nea despu√©s de imprimir el texto
        } finally {
            inputLock.unlock(); // Liberamos el lock
        }
    }

    // M√©todo que muestra una animaci√≥n de abejas con un retraso din√°mico basado en una funci√≥n trigonom√©trica
    public static void animacionAbejas() {
        inputLock.lock(); // Lock para evitar acceso concurrente
        try {
            String[] frames = {
                    "      üå∫     ",
                    "   üêù         ",
                    "         üêù   ",
                    "      üçØ     ",
            };

            // Usamos una funci√≥n matem√°tica (seno) para alterar la velocidad de la animaci√≥n
            for (int i = 0; i < 5; i++) {
                for (String frame : frames) {
                    // Calculamos un factor de tiempo basado en la funci√≥n seno para crear una animaci√≥n m√°s din√°mica
                    double timeFactor = Math.sin(i + frame.length()) * 150 + 150;  // Ajuste din√°mico del tiempo
                    System.out.print("\r" + frame); // Sobrescribimos la l√≠nea para crear el efecto de animaci√≥n
                    try {
                        Thread.sleep((long) timeFactor); // Usamos el tiempo calculado para la espera
                    } catch (InterruptedException ignored) {
                    }
                }
            }
            System.out.println("\rüêù Las abejas est√°n listas para trabajar.\n");
        } finally {
            inputLock.unlock(); // Liberamos el lock
        }
    }

    // M√©todo que muestra una animaci√≥n de b√∫squeda con un retraso constante
    public static void animacionBusqueda() {
        inputLock.lock(); // Bloqueo para evitar acceso concurrente
        try {
            String[] frames = {
                    "      üîç     ",
                    "   üîé         ",
                    "         üîç   ",
                    "      üîé     ",
            };

            // Animaci√≥n simple de b√∫squeda con un tiempo constante entre cuadros
            for (int i = 0; i < 5; i++) {
                for (String frame : frames) {
                    System.out.print("\r" + frame); // Imprimimos el cuadro de animaci√≥n
                    try {
                        Thread.sleep(300); // Espera constante de 300 ms
                    } catch (InterruptedException ignored) {}
                }
            }
        } finally {
            inputLock.unlock(); // Liberamos el lock
        }
    }

    // M√©todo que obtiene una entrada v√°lida del usuario, asegur√°ndose de que coincida con un patr√≥n regex
    public static String getValidInput(String prompt, String regex) {
        inputLock.lock(); // Lock para asegurar que no haya condiciones de carrera en la entrada del usuario
        try {
            Scanner scanner = new Scanner(System.in); // Scanner para leer la entrada del usuario
            String input;
            while (true) {
                System.out.print(prompt); // Pedimos la entrada
                input = scanner.nextLine().trim(); // Limpiamos espacios al inicio y al final

                // Normalizamos la entrada (capitalizamos la primera letra y convertimos el resto a min√∫sculas)
                if (!input.isEmpty()) {
                    input = input.substring(0, 1).toUpperCase() + input.substring(1).toLowerCase();
                }

                // Verificamos si la entrada coincide con el patr√≥n proporcionado
                if (input.matches(regex)) {
                    return input; // Si es v√°lida, la devolvemos
                }
                System.out.println("‚ö†Ô∏è Entrada inv√°lida. Int√©ntalo de nuevo.\n"); // Mensaje de error si la entrada es inv√°lida
            }
        } finally {
            inputLock.unlock(); // Liberamos el lock
        }
    }

    // M√©todo que ejecuta una tarea en un hilo separado y espera su finalizaci√≥n
    public static void runWithBlock(Runnable task) {
        Thread thread = new Thread(task); // Creamos un nuevo hilo
        thread.start(); // Iniciamos el hilo
        try {
            thread.join(); // Esperamos a que termine la ejecuci√≥n del hilo
        } catch (InterruptedException ignored) {
            // Si el hilo es interrumpido, simplemente lo ignoramos
        }
    }

    // M√©todo que verifica la integridad de los datos de las colmenas y apicultores
    public static void verificarDatos(List<Colmena> colmenas, List<Apicultor> apicultores, Map<String, Apicultor> asignaciones) {
        Scanner scanner = new Scanner(System.in);

        runWithBlock(() -> printWithDelay("üóÉÔ∏è Verificando integridad de datos...", 50)); // Mensaje de verificaci√≥n
        animacionBusqueda(); // Animaci√≥n de b√∫squeda

        // Validamos cada colmena
        for (Colmena colmena : colmenas) {
            // Comprobamos que cada colmena tenga un ID v√°lido
            if (colmena.id == null || !colmena.id.matches("C\\d{3}")) {
                printWithDelay("\r‚ö†Ô∏è Falta el ID de una colmena. Proporcione un nuevo ID (formato CXXX): ", 50);
                colmena.id = getValidInput("ID: ", "C\\d{3}");
            }
            // Validamos la ubicaci√≥n de la colmena
            if (colmena.ubicacion == null || colmena.ubicacion.isEmpty()) {
                printWithDelay("\r‚ö†Ô∏è Falta la ubicaci√≥n de la colmena con ID " + colmena.id + ". Proporcione una ubicaci√≥n: ", 50);
                colmena.ubicacion = scanner.nextLine();
            }
            // Validamos el estado de salud de la colmena
            if (colmena.estadoSalud == null || !colmena.estadoSalud.matches("Buena|Regular|Mala")) {
                printWithDelay("\r‚ö†Ô∏è Falta el estado de salud de la colmena con ID " + colmena.id + ". Proporcione un estado (Buena/Regular/Mala): ", 50);
                colmena.estadoSalud = getValidInput("Estado de Salud: ", "Buena|Regular|Mala");
            }
            // Si no hay apicultor asignado, asignamos uno
            if (!asignaciones.containsKey(colmena.id)) {
                printWithDelay("\r‚ö†Ô∏è No hay un apicultor asignado para la colmena con ID " + colmena.id + ".", 50);
                printWithDelay("\nüßë‚Äçüåæ Asignando un apicultor existente:\n", 50);

                // Listamos apicultores disponibles para asignar
                for (int i = 0; i < apicultores.size(); i++) {
                    System.out.printf("[%d] %s (Tel: %s)\n", i + 1, apicultores.get(i).nombre, apicultores.get(i).telefono);
                }

                int opcion = Integer.parseInt(getValidInput("\nSelecciona un apicultor por n√∫mero: ", "\\d+")) - 1;
                if (opcion >= 0 && opcion < apicultores.size()) {
                    asignaciones.put(colmena.id, apicultores.get(opcion)); // Asignamos el apicultor seleccionado
                    printWithDelay("\n‚úÖ Apicultor asignado correctamente.\n", 50);
                } else {
                    printWithDelay("‚ö†Ô∏è Opci√≥n no v√°lida. Se omiti√≥ la asignaci√≥n.\n", 50);
                }
            }
        }

        // Validamos los datos de los apicultores
        for (Apicultor apicultor : apicultores) {
            // Validamos el nombre del apicultor
            if (apicultor.nombre == null || apicultor.nombre.isEmpty()) {
                printWithDelay("\r‚ö†Ô∏è Falta el nombre de un apicultor. Proporcione un nombre: ", 50);
                apicultor.nombre = scanner.nextLine();
            }
            // Validamos el tel√©fono del apicultor
            if (apicultor.telefono == null || !apicultor.telefono.matches("\\d{10}")) {
                printWithDelay("\r‚ö†Ô∏è Falta el tel√©fono del apicultor " + apicultor.nombre + ". Proporcione un tel√©fono (10 d√≠gitos): ", 50);

                String telefono = getValidInput("Tel√©fono: ", "\\d{10}");
                boolean telefonoExistente = apicultores.stream().anyMatch(a -> a.telefono != null && a.telefono.equals(telefono));

                // Verificamos si el tel√©fono ya est√° registrado por otro apicultor
                if (telefonoExistente) {
                    printWithDelay("\n‚ö†Ô∏è El tel√©fono " + telefono + " ya est√° registrado por otro apicultor. Intenta con otro n√∫mero.", 50);
                } else {
                    apicultor.telefono = telefono; // Asignamos el tel√©fono
                }
            }
        }

        printWithDelay("\r‚úÖ Verificaci√≥n completa.\n", 50); // Mensaje de verificaci√≥n completada
    }

    // M√©todo para cargar los datos desde un archivo serializado
    public static void cargarDatos(List<Colmena> colmenas, List<Apicultor> apicultores, Map<String, Apicultor> asignaciones, String dataFile) throws IOException, ClassNotFoundException {
        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(dataFile))) {
            // Leemos el archivo serializado y extraemos los datos
            DatosApicola datos = (DatosApicola) ois.readObject();
            colmenas.addAll(datos.colmenas);
            apicultores.addAll(datos.apicultores);
            asignaciones.putAll(datos.asignaciones);
            verificarDatos(colmenas, apicultores, asignaciones); // Verificamos los datos cargados
        }
    }

    // M√©todo para guardar los datos a un archivo serializado
    public static void guardarDatos(List<Colmena> colmenas, List<Apicultor> apicultores, Map<String, Apicultor> asignaciones, String dataFile) throws IOException {
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(dataFile))) {
            // Guardamos los datos serializados en el archivo
            oos.writeObject(new DatosApicola(colmenas, apicultores, asignaciones));
            printWithDelay("‚úÖ Datos guardados correctamente.\n", 50); // Confirmaci√≥n de guardado
        }
    }
}
